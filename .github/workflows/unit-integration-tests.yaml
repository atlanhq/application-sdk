# Github Actions workflow to run python unit and integration tests with coverage reporting
# The action also builds a docker image for the application

name: Unit and Integration Tests

on:
  workflow_call:
  push:
    branches:
      - main
      - develop
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main
      - develop

jobs:
  tests:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
    timeout-minutes: 10
    permissions:
      pull-requests: write
      contents: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Build Docker image
      - name: Build Docker Image
        run: docker build -t application-sdk-image -f ./Dockerfile .

      - name: Set up Python 3.11
        id: setup-python
        uses: actions/setup-python@v1
        with:
          python-version: "3.11"

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.5
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --extras "workflows dashboard iceberg daft"

      - name: Run Unit and Integration Tests with Coverage
        run: |
          poetry run coverage run -m pytest tests/ --full-trace --hypothesis-show-statistics
          poetry run coverage xml
          poetry run coverage report

      - name: Comment Coverage Report on PR
        uses: orgoro/coverage@v3.2
        with:
          coverageFile: coverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}