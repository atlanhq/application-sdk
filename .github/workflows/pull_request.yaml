name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, labeled, reopened]
    branches: [main, develop]

permissions:
  id-token: write
  contents: write
  issues: write
  pull-requests: write
  security-events: write
  actions: write

jobs:
  # Conventional Commits
  commits:
    name: Conventional Commits
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: webiny/action-conventional-commits@v1.3.0
        with:
          GITHUB_TOKEN: ${{ secrets.ORG_PAT_GITHUB }}

  # Code Quality Checks
  lint:
    name: Pre-commit Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: "./.github/actions/setup-deps"
      - uses: pre-commit/action@v3.0.1

  docstr:
    name: Docstring Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: "./.github/actions/docstring-coverage"
        with:
          module-name: application_sdk
          fail-under: "30"

  # Security Checks
  trivy:
    name: Trivy Code Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: "./.github/actions/trivy"
        with:
          add-report-comment-to-pr: "true"

  codeql:
    name: CodeQL
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ["python"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Testing
  unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: "./.github/actions/setup-deps"
      - name: Get branch name
        run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
        id: get_branch
      - name: Run Unit and Integration Tests with Coverage
        run: |
          poetry run coverage run -m pytest tests/ --full-trace --hypothesis-show-statistics
          poetry run coverage xml
          poetry run coverage html
          poetry run coverage report --fail-under=60
      - name: Comment Coverage Report on PR
        uses: orgoro/coverage@v3.2
        with:
          coverageFile: coverage.xml
          token: ${{ secrets.ORG_PAT_GITHUB }}
      - name: Upload Coverage Report to S3
        uses: atlanhq/kryptonite/upload@v1
        with:
          source: ./htmlcov
          target: coverage/application-sdk/${{ steps.get_branch.outputs.branch }}
      - name: Comment Coverage Report URL on PR
        uses: mshick/add-pr-comment@v2
        with:
          message-id: "coverage"
          message: |
            Coverage Report available at: https://k.atlan.dev/coverage/application-sdk/${{ steps.get_branch.outputs.branch }}

  matrix-builder:
    name: Build Test Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get PR Labels
        id: get-labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            const labelNames = labels.map(label => label.name).join(',');
            console.log(`PR Labels: ${labelNames}`);
            core.setOutput('labels', labelNames);

      - name: Build matrix from PR labels
        id: set-matrix
        run: |
          # Get the target branch of PR
          TARGET_BRANCH="${{ github.base_ref }}"
          # Default matrix if no label provided
          DEFAULT_MATRIX="{\"include\":[{\"repo_name\":\"atlan-postgres-app\",\"target_branch\":\"${TARGET_BRANCH}\"}]}"

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Parse labels from GitHub Script output
            LABELS="${{ steps.get-labels.outputs.labels }}"

            FOUND_LABEL=false
            INCLUDES=""

            echo "Found labels: ${LABELS}"

            IFS=',' read -ra LABEL_ARRAY <<< "$LABELS"
            for LABEL in "${LABEL_ARRAY[@]}"; do
              if [[ $LABEL =~ ^([^:]+):([^:]+)$ ]]; then
                REPO="${BASH_REMATCH[1]}"
                BRANCH="${BASH_REMATCH[2]}"

                # Add comma if not the first entry
                if [[ "$FOUND_LABEL" == "true" ]]; then
                  INCLUDES="${INCLUDES},"
                fi

                # Add this pair as a direct include entry
                INCLUDES="${INCLUDES}{\"repo_name\":\"${REPO}\",\"target_branch\":\"${BRANCH}\"}"
                FOUND_LABEL=true
                echo "Added pair: $REPO:$BRANCH"
              fi
            done

            # Generate matrix JSON with includes
            if [[ "$FOUND_LABEL" == "true" ]]; then
              MATRIX="{\"include\":[${INCLUDES}]}"
              echo "Generated matrix from labels: $MATRIX"
            else
              MATRIX="$DEFAULT_MATRIX"
              echo "No repo:branch labels found, using default matrix"
            fi
          else
            MATRIX="$DEFAULT_MATRIX"
            echo "Not a PR event, using default matrix"
          fi

          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "Matrix output: $MATRIX"

  # Run Examples
  run-examples:
    name: Run Examples
    needs: matrix-builder
    if: ((github.event.action == 'labeled' && github.event.label.name == 'run-examples') || contains(github.event.pull_request.labels.*.name, 'run-examples'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Dapr CLI
        run: |
          wget -q https://raw.githubusercontent.com/dapr/cli/master/install/install.sh -O - | /bin/bash -s 1.14.1
          dapr init --runtime-version 1.13.6 --slim

      - name: Install Temporal CLI and Start Server
        run: |
          curl -sSf https://temporal.download/cli.sh | sh
          export PATH="$HOME/.temporalio/bin:$PATH"
          temporal server start-dev --db-filename /tmp/temporal.db &
          sleep 10  # Give some time for Temporal to start

      - name: Set up Python 3.11
        uses: actions/setup-python@v1
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.5
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Install Dependencies
        run: |
          git config --global url."https://${{ secrets.ORG_PAT_GITHUB }}@github.com/".insteadOf "git@github.com:"
          # Configure poetry to use project-specific virtualenv
          poetry config virtualenvs.in-project true

          # Install the dependencies with extras
          make install
          poetry update application-sdk --dry-run

      # Start all services
      - name: Start Platform Services
        run: |
          make start-all
          sleep 10  # Give services time to start up

      # Make API call and capture workflow/run IDs for each example
      - name: Start the workflows
        id: workflow_info
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          SNOWFLAKE_ACCOUNT_ID: ${{ secrets.SNOWFLAKE_ACCOUNT_ID }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        run: |
          cd examples
          poetry run python run_examples.py

          echo "Workflow status:"
          cat workflow_status.md

      - name: Comment test results on Pull Request
        if: ${{ !cancelled() && github.event_name == 'pull_request' }}
        uses: mshick/add-pr-comment@v2
        with:
          message-id: "workflow_status"
          message-path: "examples/workflow_status.md"

      # Stop all services
      - name: Stop all services
        continue-on-error: true
        run: |
          make stop-all
          sleep 10  # Give services time to stop

  # E2E Tests: This step is run for each app in the matrix
  e2e-apps:
    name: E2E (Apps)
    needs: matrix-builder
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-builder.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Get the application-sdk commit SHA
        run: |
          if [ "${{ github.event.pull_request.head.sha }}" ]; then
            echo "distinct_id=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
          else
            echo "distinct_id=${{ github.sha }}" >> $GITHUB_ENV
          fi

          if [ "${{ github.base_ref }}" ]; then
            echo "base_branch=refs/heads/${{ github.base_ref }}" >> $GITHUB_ENV
          else
            echo "base_branch=${{ github.ref }}" >> $GITHUB_ENV
          fi
      - name: Trigger E2E Integrations Tests
        uses: codex-/return-dispatch@v2
        id: return_dispatch
        with:
          token: "${{ secrets.ORG_PAT_GITHUB }}"
          ref: "refs/heads/${{ matrix.target_branch }}"
          repo: "${{ matrix.repo_name }}"
          owner: "atlanhq"
          workflow: "e2e-integration-test.yaml"
          workflow_timeout_seconds: 300
          workflow_job_steps_retry_seconds: 20
          distinct_id: "${{ env.distinct_id }}"
      - name: Check the test logs using the below run URL
        run: |
          echo ${{steps.return_dispatch.outputs.run_id}}
          echo ${{steps.return_dispatch.outputs.run_url}}
      - name: Check Workflow Status
        run: |
          repo_owner="atlanhq"
          repo_name="${{ matrix.repo_name }}"
          run_id="${{steps.return_dispatch.outputs.run_id}}"

          echo "Checking status of workflow run $run_id in $repo_name"

          status="in_progress"
          start_time=$(date +%s)
          timeout=240
          while [[ "$status" == "in_progress" || "$status" == "queued" ]]; do
            sleep 10
            response=$(curl -s -H "Authorization: Bearer ${{ secrets.ORG_PAT_GITHUB }}" \
              https://api.github.com/repos/$repo_owner/$repo_name/actions/runs/$run_id)
            status=$(echo $response | jq -r '.status')
            conclusion=$(echo $response | jq -r '.conclusion')

            current_time=$(date +%s)
            elapsed_time=$((current_time - start_time))

            if [[ $elapsed_time -ge $timeout ]]; then
              echo "Workflow run timeout reached after $timeout seconds"
              exit 1
            fi
          done

          if [[ "$conclusion" != "success" ]]; then
            echo "Workflow run $run_id in $repo_name failed with conclusion $conclusion"
            exit 1
          else
            echo "Workflow run $run_id in $repo_name succeeded"
          fi

  # Documentation
  docs:
    name: Docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: "./.github/actions/setup-deps"
      - name: Install graphviz
        run: |
          sudo apt install graphviz
      - name: Generate Sphinx Docs and UML Diagrams
        run: |
          source .venv/bin/activate
          make apidocs
      - name: Upload Docs
        uses: atlanhq/kryptonite/upload@v1
        with:
          source: ./docs/site
          target: application-sdk/${{ github.head_ref }}
      - name: Comment Kryptonite URL on PR
        uses: mshick/add-pr-comment@v2
        with:
          message-id: "docs"
          message: |
            🛠 Docs available at: https://k.atlan.dev/application-sdk/${{ github.head_ref }}
