# Trivy container scan. This can be reused across all the applications.

name: E2E Test for Application Examples
on:
  workflow_call:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v3

    # Install Dapr
    - name: Install Dapr CLI
      run: |
        wget -q https://raw.githubusercontent.com/dapr/cli/master/install/install.sh -O - | /bin/bash
        dapr init --runtime-version 1.13.6 --slim

    # Install Temporal
    - name: Install Temporal CLI and Start Server
      run: |
        curl -sSf https://temporal.download/cli.sh | sh
        export PATH="$HOME/.temporalio/bin:$PATH"
        temporal server start-dev --db-filename /tmp/temporal.db &
        sleep 10  # Give some time for Temporal to start

    - name: Set up Python 3.11
      uses: actions/setup-python@v1
      with:
        python-version: "3.11"

    - name: Install poetry
      run: |
        pip install poetry==1.8.3

    - name: Install Dependencies
      run: |
        git config --global url."https://${{ secrets.ORG_PAT_GITHUB }}@github.com/".insteadOf "git@github.com:"
        # Configure poetry to use project-specific virtualenv
        poetry config virtualenvs.in-project true

        # Install the dependencies with extras
        poetry install --all-extras
        poetry update application-sdk --dry-run

    # Start all services
    - name: Start Platform Services
      run: |
        cd examples
        make start-all
        sleep 10  # Give services time to start up

    # Make API call and capture workflow/run IDs for each example
    - name: Start the workflows
      id: workflow_info
      env:
        POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        SNOWFLAKE_ACCOUNT_ID: ${{ secrets.SNOWFLAKE_ACCOUNT_ID }}
        SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
        SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      run: |
        cd examples
        poetry run python run_examples.py

        echo "Workflow status:"
        cat workflow_status.md

    - name: Comment test results on Pull Request
      if: ${{ always() && github.event_name == 'pull_request' }}
      uses: mshick/add-pr-comment@v2
      with:
        message-id: 'workflow_status'
        message-path: 'examples/workflow_status.md'

    # Stop all services
    - name: Stop all services
      continue-on-error: true
      run: |
        make stop-all
        sleep 10  # Give services time to stop