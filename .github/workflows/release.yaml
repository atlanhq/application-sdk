# Automated Semantic Releases for application_sdk

# This workflow is to increment the version for the SDK semantically based on the conventional commits
# merged to both main and develop branches. Please refer to the release flow explanation in the diagram below.

# Semantic Versioning Flow:
#
#   Time     main               develop                  Commit Message
#    |        |                    |
#    |     v1.0.0 ----auto-sync---> v1.0.0               feat: initial stable release
#    |        |                    |
#    |        |                    |--> v1.0.1-rc.1      fix: update logging format
#    |        |                    |--> v1.0.1-rc.2      feat: add new endpoint
#    |        |                    |--> v1.0.1-rc.3      test: improve test coverage
#    |        |                    |
#    |     v1.1.0 <----merge------- v1.0.1-rc.3          test: improve test coverage
#    |        | ----auto-sync-----> v1.1.0
#    |        |                    |
#    |        |                    |--> v1.1.1-rc.1      fix: handle edge cases
#    |        |                    |--> v1.1.1-rc.2      feat!: change API structure (BREAKING CHANGE)
#    |        |                    |--> v1.1.1-rc.3      perf: optimize queries
#    |        |                    |
#    |     v2.0.0 <----merge------- v1.1.1-rc.3
#    |        | ----auto-sync-----> v2.0.0
#    â–¼        |                    |
#
# Notes:
# - Develop branch uses -rc.N tags for pre-releases
# - Main branch only contains stable semantic versions
# - When develop merges to main, the RC version becomes a stable version based on the commits merged.
# - Auto-sync ensures main changes are always propagated to develop

name: Tag and Release

on:
  pull_request:
    types: [ closed ]
    branches: [ develop, main ]

jobs:
  tag-and-release:
    if: github.event.pull_request.merged == true && !startsWith(github.event.pull_request.head.ref, 'version-update')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all tags and branches
          ref: ${{ github.ref_name }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.5
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Install Poetry and dependencies
        run: |
          pip install semver

      - name: Perform Version Update
        id: version_bump
        run: |
          python .github/scripts/release.py ${{ github.ref_name }}
          poetry lock

      - name: Commit version bump and changelog
        env:
          GH_TOKEN: ${{ secrets.ORG_PAT_GITHUB }}
        run: |
          git config --global user.name 'atlan-ci'
          git config --global user.email 'it@atlan.com'

          git checkout -b version-update-${{ github.ref_name }}

          git add pyproject.toml poetry.lock
          git commit -m "chore(release): bump version"

          git push origin version-update-${{ github.ref_name }} --force
          gh pr create --base develop --title "chore(release): version bump" --body "Automated PR to increment version"
          gh pr merge --squash --admin

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.ORG_PAT_GITHUB }}
        run: |
          gh release create "v$(poetry version -s)" --generate-notes