# Github Actions workflow to run python unit and integration tests with coverage reporting
# The action also builds a docker image for the application

name: Tests

on:
  workflow_call:
  push:
    branches:
      - main
      - develop
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main
      - develop

permissions:
  pull-requests: write
  contents: write
  id-token: write  # Required for AWS credentials

jobs:
  tests:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
    timeout-minutes: 10
    permissions:
      pull-requests: write
      contents: write
      id-token: write  # Required for AWS credentials

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        id: setup-python
        uses: actions/setup-python@v1
        with:
          python-version: "3.11"

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-south-1
          role-to-assume: arn:aws:iam::733936409301:role/kryptonite-store_FullAccess

      - name: Get branch name
        run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
        id: get_branch

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.5
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock', '**/pyproject.toml') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --extras "iceberg workflows daft langgraph_agent"

      - name: Run Unit and Integration Tests with Coverage
        run: |
          poetry run coverage run -m pytest tests/ --full-trace --hypothesis-show-statistics
          poetry run coverage xml
          poetry run coverage html
          poetry run coverage report --fail-under=60

      - name: Comment Coverage Report on PR
        uses: orgoro/coverage@v3.2
        with:
          coverageFile: coverage.xml
          token: ${{ secrets.ORG_PAT_GITHUB }}

      - name: Upload Coverage Report to S3
        run: |
          aws s3 sync ./htmlcov s3://kryptonite-store/coverage/application-sdk/${{ steps.get_branch.outputs.branch }} --delete