[tool.poetry]
name = "application-sdk"
version = "0.1.0"
description = "Python Application SDK is a Python library for developing applications on the Atlan Platform"
authors = ["Atlan App Team <apps@atlan.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
opentelemetry-exporter-otlp = "^1.27.0"
psutil = "^6.0.0"  # Being used in fastapi-server and scalene-tests for retrieving cpu and memory usage, info on running processes.
fastapi = {extras = ["standard"], version = "^0.115.0"}
sqlalchemy = {extras = ["asyncio"], version = "^2.0.36", optional = true}
pyatlan = "4.1.0"
orjson = {version = "^3.10.7", optional = true}   # Being used in parquet.py
pyarrow = {version = "^17.0.0", optional = true}  # Being used in parquet.py
pandas = {version = "^2.2.3", optional = true}
dapr = {version = "^1.14.0", optional = true}
temporalio = {version = "^1.7.1", optional = true}
getdaft = {extras = ["sql"], version = "^0.3.15", optional = true}
pyiceberg = {version = "^0.8.1", optional = true} # For iceberg input and output support
boto3 = {version = "^1.31.3", optional = true} # For iam auth support
pydantic = "^2.10.6"
loguru = "^0.7.3"
uvloop = "^0.21.0" # in worker module for managing Temporal workers.

[tool.poetry.extras]
workflows = [
    "dapr",
    "temporalio",
    "pandas",
]
# daft module to be used when dealing with daft dataframes.
daft = [
    "getdaft"
]
# pyiceberg module to be used when dealing with iceberg tables.
iceberg = [
    "pyiceberg"
]
# sqlalchemy module to be used when dealing with sql clients.
sqlalchemy = [
    "sqlalchemy"
]
# Modules for iam auth support
# contains boto3 and boto3-stubs
# boto3-stubs is optional and is used for boto related type checking
iam_auth = [
    "boto3",
]



[tool.poetry.group.dev.dependencies]
pre-commit = "^3.8.0"
isort = "^5.13.2"
myst-parser = "^4.0.0"
pydata-sphinx-theme = "^0.16.0"
pylint = "^3.3.3"
sphinx = "^8.1.3"
graphviz = "^0.20.3"
boto3-stubs = {version = "^1.31.3", optional = true}

[tool.poetry.group.test.dependencies]
mock = "^5.1.0"
pytest = "^8.3.3"
coverage = "^7.6.1"
pytest-asyncio = "^0.24.0"
hypothesis = "^6.114.0"
faker = "^8.0.0"
duckdb = "^1.1.3"
duckdb-engine = "^0.14.0"


[tool.poetry.group.examples.dependencies]
snowflake-sqlalchemy = "^1.7.0"
psycopg = {extras = ["binary"], version = "^3.2.3"}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pyright]
venvPath = "."
venv = ".venv"
typeCheckingMode = "strict"

[tool.pytest.ini_options]
asyncio_mode = "auto"
