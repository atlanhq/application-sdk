apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-sync-sa
  namespace: {{ .Values.app.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-sync-role
  namespace: {{ .Values.app.daprStateStore.postgresClusterNamespace }}
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-sync-rolebinding
  namespace: {{ .Values.app.daprStateStore.postgresClusterNamespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: secret-sync-role
subjects:
  - kind: ServiceAccount
    name: secret-sync-sa
    namespace: {{ .Values.app.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-sync-role
  namespace: {{ .Values.app.namespace }}
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-sync-rolebinding
  namespace: {{ .Values.app.namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: secret-sync-role
subjects:
  - kind: ServiceAccount
    name: secret-sync-sa
    namespace: {{ .Values.app.namespace }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: sync-secret-dpar-statestore
  namespace: {{ .Values.app.namespace }}
spec:
  template:
    spec:
      serviceAccountName: secret-sync-sa
      containers:
      - name: sync-secret
        image: bitnami/kubectl:latest
        env:
        - name: APP_NAMESPACE
          value: {{ .Values.app.namespace }}
        - name: POSTGRES_NAMESPACE
          value: {{ .Values.app.daprStateStore.postgresClusterNamespace }}
        command:
          - /bin/sh
          - -c
          - |
            # Use the specified namespace for secret retrieval
            echo "Using PostgreSQL namespace: $POSTGRES_NAMESPACE"

            # Get the app_admin user password
            APP_ADMIN_PASSWORD=$(kubectl get secret postgres-cluster-app -n $POSTGRES_NAMESPACE -o jsonpath="{.data.password}" | base64 --decode)

            # Generate the Dapr connection string
            POSTGRES_HOST="postgres-cluster-rw.${POSTGRES_NAMESPACE}.svc.cluster.local"
            POSTGRES_PORT="5432"
            DATABASE_NAME="dapr"
            CONNECTION_STRING="postgresql://app_admin:$APP_ADMIN_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$DATABASE_NAME"

            echo "Creating a secret for the Dapr connection string in the ${APP_NAMESPACE} namespace..."
            kubectl create secret generic dapr-pg-connection-string \
              --from-literal=connection-string="$CONNECTION_STRING" \
              -n $APP_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
      restartPolicy: OnFailure
